/*! Class - v0.1.0 - 2013-04-23
* https://lazd.github.com/Class/
* Copyright (c) 2013 Larry Davis; Licensed BSD */
(function(t){var r=/xyz/.test(function(){return"xyz"})?/\b_super\b/:{test:function(){return!0}},n=function(t,r,n,e){var o=n[t];return function(){var u=this._super;this._super=e?o:n[t];try{return r.apply(this,arguments)}finally{this._super=u}}},e=function(t,e,o){e=e||this.constructor&&this.constructor.prototype;for(var u in t)if(t.hasOwnProperty(u)&&"construct"!==u&&"destruct"!==u){var c=e&&"function"==typeof t[u]&&"function"==typeof e[u]&&r.test(t[u]);this[u]=c?n(u,t[u],e,o):t[u]}},o=function(t){return t&&t.extend?t.extend.extend(t):o.extend(t)};o.prototype.mixin=e,o.extend=function u(t){function r(){var t=Array.prototype.slice.call(arguments);void 0===t[0]&&(t[0]={});var r=Object.create(o);return r.construct&&r.construct.apply(r,t),r.init&&r.init.apply(r,t),r}var n=this.prototype,o=Object.create(n);if(t){if(e.call(o,t,n),Array.isArray(t.mixins))for(var c=0,s=t.mixins.length;s>c;c++)e.call(o,t.mixins[c],o,!0);if(t.construct&&n.construct?o.construct=function(){n.construct.apply(this,arguments),t.construct.apply(this,arguments)}:t.construct&&(o.construct=t.construct),t.destruct&&n.destruct?o.destruct=function(){t.destruct.apply(this,arguments),n.destruct.apply(this,arguments)}:t.destruct&&(o.destruct=t.destruct),"string"==typeof t.toString){var i=t.toString;o.toString=function(){return i}}}return r.prototype=o,r.prototype.constructor=r,r.extend=u,r},"undefined"!=typeof module&&module.exports?module.exports=o:"function"==typeof t.define?function(t){t(function(){return o})}(t.define):t.Class=o})(this);